//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Emmas-Assets/Movement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Movement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Movement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Movement"",
    ""maps"": [
        {
            ""name"": ""CharacterControl"",
            ""id"": ""9a3e133d-f472-4a90-8d7e-bbfdcd2f72a0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""737b2ba6-3fe1-4cf1-8225-9db1a60d1945"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""c9293f39-0b33-4f2b-aebc-8158c163223d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""cbb5d6b9-a3c0-4b72-b1c1-08cc3038bd5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""R_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""16ea9aef-00c3-400c-b354-84dffc462cde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""L_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ca1e4951-a92d-4b53-8b0f-da48a05d9d22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""C1"",
                    ""type"": ""Button"",
                    ""id"": ""7f48ed75-ec42-4721-9c3e-a6119842e020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C2"",
                    ""type"": ""Button"",
                    ""id"": ""276e295a-1a16-4b19-b729-393677506472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f438f71b-2616-4aa0-bd77-f7c9988ed955"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38a1e291-ea31-43b9-b4b9-8d72c7023bfd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9d8e63e-94b8-4b95-b3f9-4f0ebefcbb83"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9f7bc3b-af61-4265-abba-5d98c09d51f2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27cf52f8-8d76-453d-af37-f4ea30876b30"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""899b69e0-3f22-4e2c-bc85-a3b8501c6936"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""250f64b6-5471-4707-bf7d-7156d6457d1a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c2efbd3-220d-428a-8059-7cca2c47d613"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1750a859-e8aa-4cb4-9c83-3db7b3e6f1d5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControl
        m_CharacterControl = asset.FindActionMap("CharacterControl", throwIfNotFound: true);
        m_CharacterControl_Movement = m_CharacterControl.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControl_Run = m_CharacterControl.FindAction("Run", throwIfNotFound: true);
        m_CharacterControl_Rotation = m_CharacterControl.FindAction("Rotation", throwIfNotFound: true);
        m_CharacterControl_R_Attack = m_CharacterControl.FindAction("R_Attack", throwIfNotFound: true);
        m_CharacterControl_L_Attack = m_CharacterControl.FindAction("L_Attack", throwIfNotFound: true);
        m_CharacterControl_C1 = m_CharacterControl.FindAction("C1", throwIfNotFound: true);
        m_CharacterControl_C2 = m_CharacterControl.FindAction("C2", throwIfNotFound: true);
        m_CharacterControl_Interact = m_CharacterControl.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControl
    private readonly InputActionMap m_CharacterControl;
    private List<ICharacterControlActions> m_CharacterControlActionsCallbackInterfaces = new List<ICharacterControlActions>();
    private readonly InputAction m_CharacterControl_Movement;
    private readonly InputAction m_CharacterControl_Run;
    private readonly InputAction m_CharacterControl_Rotation;
    private readonly InputAction m_CharacterControl_R_Attack;
    private readonly InputAction m_CharacterControl_L_Attack;
    private readonly InputAction m_CharacterControl_C1;
    private readonly InputAction m_CharacterControl_C2;
    private readonly InputAction m_CharacterControl_Interact;
    public struct CharacterControlActions
    {
        private @Movement m_Wrapper;
        public CharacterControlActions(@Movement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControl_Movement;
        public InputAction @Run => m_Wrapper.m_CharacterControl_Run;
        public InputAction @Rotation => m_Wrapper.m_CharacterControl_Rotation;
        public InputAction @R_Attack => m_Wrapper.m_CharacterControl_R_Attack;
        public InputAction @L_Attack => m_Wrapper.m_CharacterControl_L_Attack;
        public InputAction @C1 => m_Wrapper.m_CharacterControl_C1;
        public InputAction @C2 => m_Wrapper.m_CharacterControl_C2;
        public InputAction @Interact => m_Wrapper.m_CharacterControl_Interact;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @R_Attack.started += instance.OnR_Attack;
            @R_Attack.performed += instance.OnR_Attack;
            @R_Attack.canceled += instance.OnR_Attack;
            @L_Attack.started += instance.OnL_Attack;
            @L_Attack.performed += instance.OnL_Attack;
            @L_Attack.canceled += instance.OnL_Attack;
            @C1.started += instance.OnC1;
            @C1.performed += instance.OnC1;
            @C1.canceled += instance.OnC1;
            @C2.started += instance.OnC2;
            @C2.performed += instance.OnC2;
            @C2.canceled += instance.OnC2;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ICharacterControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @R_Attack.started -= instance.OnR_Attack;
            @R_Attack.performed -= instance.OnR_Attack;
            @R_Attack.canceled -= instance.OnR_Attack;
            @L_Attack.started -= instance.OnL_Attack;
            @L_Attack.performed -= instance.OnL_Attack;
            @L_Attack.canceled -= instance.OnL_Attack;
            @C1.started -= instance.OnC1;
            @C1.performed -= instance.OnC1;
            @C1.canceled -= instance.OnC1;
            @C2.started -= instance.OnC2;
            @C2.performed -= instance.OnC2;
            @C2.canceled -= instance.OnC2;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ICharacterControlActions instance)
        {
            if (m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlActions @CharacterControl => new CharacterControlActions(this);
    public interface ICharacterControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnR_Attack(InputAction.CallbackContext context);
        void OnL_Attack(InputAction.CallbackContext context);
        void OnC1(InputAction.CallbackContext context);
        void OnC2(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
